<script>
  import { signal, animatedSignal, effect } from 'canvasengine'
  import { Bar } from '../src/presets/Bar'

  enum Direction {
    Down = "down",
    Left = "left",
    Right = "right",
    Up = "up",
  }

  enum Animation {
    Stand = "stand",
    Walk = "walk",
    Attack = "attack",
    Skill = "skill",
  }

  const x = animatedSignal(700);
  const y = animatedSignal(400);
  const direction = signal(Direction.Down);
  const speed = 5;

  const controls = signal({
    down: {
      repeat: true,
      bind: ["down", 'bottom_right', 'bottom_left'],
      trigger() {
        y.update((y) => y + speed);
        direction.set(Direction.Down);
      },
    },
    up: {
      repeat: true,
      bind: ['up', 'top_left', 'top_right'],
      trigger() {
        y.update((y) => y - speed);
        direction.set(Direction.Up);
      },
    },
    left: {
      repeat: true,
      bind: "left",
      trigger() {
        x.update((x) => x - speed);
        direction.set(Direction.Left);
      },
    },
    right: {
      repeat: true,
      bind: "right",
      trigger() {
        x.update((x) => x + speed);
        direction.set(Direction.Right);
      },
    },
  });

  const LPCSpritesheetPreset = () => {
    const frameY = (direction: Direction) => {
      return {
        [Direction.Down]: 2,
        [Direction.Left]: 1,
        [Direction.Right]: 3,
        [Direction.Up]: 0,
      }[direction];
    };

    const stand = (direction: Direction) => [
      { time: 0, frameX: 0, frameY: frameY(direction) },
    ];
    const anim = (
      direction: Direction,
      framesWidth: number,
      speed: number = 5
    ) => {
      const array: any = [];
      for (let i = 0; i < framesWidth; i++) {
        array.push({ time: i * speed, frameX: i, frameY: frameY(direction) });
      }
      return array;
    };

    const ratio = 1.5;

    return {
      id: "hero",
      image: "./hero_2.png",
      width: 1248,
      height: 2016,
      opacity: 1,
      rectWidth: 64 * ratio,
      rectHeight: 64 * ratio,
      spriteRealSize: {
        width: 48 * ratio,
        height: 52 * ratio,
      },
      framesWidth: 6,
      framesHeight: 4,
      textures: {
        [Animation.Stand]: {
          offset: {
            x: 0,
            y: 512 * ratio,
          },
          animations: ({ direction }) => [stand(direction)],
        },
        [Animation.Walk]: {
          offset: {
            x: 0,
            y: 512 * ratio,
          },
          framesWidth: 9,
          framesHeight: 4,
          animations: ({ direction }) => [anim(direction, 9)],
        },
        [Animation.Attack]: {
          offset: {
            x: 0,
            y: 768 * ratio,
          },
          framesWidth: 6,
          framesHeight: 4,
          animations: (direction: Direction) => [anim(direction, 6, 3)],
        },
        [Animation.Skill]: {
          framesWidth: 7,
          framesHeight: 4,
          animations: (direction: Direction) => [anim(direction, 7, 3)],
        },
      },
    };
  };

  const sheet = {
    definition: LPCSpritesheetPreset(),
        params: {
            direction,
        },
    }

    const health = signal(100);
    const healthMax = signal(100);
</script>

<Container x y controls zIndex={y} @viewportFollow={true}>
  <Bar width="100" height="10" value={health} maxValue={healthMax} />
  <Sprite sheet @click={() => health.update((health) => health - 10)} />
</Container>